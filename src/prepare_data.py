import ggps
import pandas as pd
import json
import os

from src.get_data import get_activity

def clean_summary(summary):
    """
    cleans the summary data (convert units, time variables...)
    summary_data : pandas DF, generated by the function get_summary()
    """
    summary["type"] = summary["activityType"].apply(lambda xx: xx["typeKey"])
    # Create indoor activity dummy
    summary["is_indoor"] = (summary["type"].isin(["indoor_cycling","virtual_ride"])) 
    ## Clean activity types
    summary = summary[~summary["type"].isin(["transition","swimToBikeTransition","uncategorized"])]
    # Bike activities
    summary.loc[(summary["type"].str.contains("cycl") | summary["type"].str.contains("ride") | summary["type"].str.contains("bik")),"type"]="bike"
    # Run/hike activities
    summary.loc[(summary["type"].str.contains("run") | summary["type"].str.contains("walk") | summary["type"].str.contains("hik")),"type"]="run"
    # Swims
    summary.loc[summary["type"].str.contains("swim"),"type"] = "swim"
    # After a check, only skiing in these activities
    summary.loc[summary["type"]=="other","type"] = "cross_country_skiing_ws"
    summary.loc[summary["type"]=="cross_country_skiing_ws","type"] = "XC ski"
    # PPG
    summary.loc[summary["type"].isin(["indoor_cardio","strength_training"]),"type"]="strength training"
    ## Convert in proper units 
    summary.columns = summary.columns.str.lower()
    summary["activityid"] = summary["activityid"].astype(str)
    speeds = [col for col in summary.columns if "speed" in col]
    summary[speeds] = summary[speeds]*3.6
    summary["starttime"] = pd.to_datetime(summary["starttimelocal"])
    summary["distance"] = summary["distance"]/1000
    summary["duration_hours"] = summary["duration"]/3600
    summary["is_indoor"] = (summary["is_indoor"]) | ((summary["distance"]<2) & (summary["type"].isin(["bike","run"])))
    return(summary)



def import_activity(mail,pw,activity_id,remove_file=True):
    """
    Import and parses a TCX file downloded from GC
    activity_id : string, id of the activity to be parsed 
    remove_file : boolean, should the file be kept or not
    """
    # If the file is not already there, download it
    if not os.path.isfile(f"act_data/{activity_id}.tcx"):
        print("Downloading file")
        get_activity(mail,pw,activity_id,output_dir="act_data")
    # parse the gpx file and make a dataframe out of it
    print("Parsing file")
    parser = ggps.TcxHandler()
    track = parser.parse(f"act_data/{activity_id}.tcx")
    tr = [pd.DataFrame(tt.__dict__).transpose() for tt in track.trackpoints]    
    res = pd.concat(tr)
    # remove the file if cache=False
    if remove_file: 
        os.remove(f"act_data/{activity_id}.tcx")
    # Convert to numeric
    nums = [col for col in res.columns if col not in ["time","type","elapsedtime"]]
    for col in nums:
        res[col] = pd.to_numeric(res[col])
    res["time"] = pd.to_datetime(res["time"])
    res["activityid"] = str(activity_id)
    res["speed"] = res["speed"]*3.6
    res = res.reset_index(drop=True)
    return(res)
